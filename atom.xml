<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://allenn.cn/"/>
  <updated>2016-09-24T10:57:54.799Z</updated>
  <id>http://allenn.cn/</id>
  
  <author>
    <name>Allen Zheng</name>
    <email>xudongzheng1225@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决mac升级10.11后，出现的 xcrun: error: invalid active developer path, missing xcrun 错误</title>
    <link href="http://allenn.cn/articles/2016-09/after-update-macosx-git-failed/"/>
    <id>http://allenn.cn/articles/2016-09/after-update-macosx-git-failed/</id>
    <published>2016-09-24T05:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>前天把小mac升级到了10.11，结果今天在终端里使用git的时候，弹出一行莫名其妙的错误：<code>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</code>。去google了一圈，找到了一个github上homebrew issues里很老的帖子，按着里面说的，重装了一下xcode command line，结果就正常了……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure>
<p>不过看帖子里并不是所有人重装都能解决问题，有些人似乎还要手动切换下xcode的路径才能解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo xcode-select -switch /</div></pre></td></tr></table></figure>
<p>因为帖子标题说是在升级到“冲浪湾”时遇到了这问题，所以看来这问题属于每次升级时候都会碰到的月经型问题了OTL。问题解决后，我又去各处翻了下问题出现的原因，可惜没有找到。个人推断可能是因为git所需的lib关联到了command line tools，升级时改动了lib的路径所致吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天把小mac升级到了10.11，结果今天在终端里使用git的时候，弹出一行莫名其妙的错误：&lt;code&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), mi
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac OS X" scheme="http://allenn.cn/tags/Mac-OS-X/"/>
    
      <category term="git" scheme="http://allenn.cn/tags/git/"/>
    
      <category term="升级" scheme="http://allenn.cn/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Sed 命令详解</title>
    <link href="http://allenn.cn/articles/2016-09/sed-usage/"/>
    <id>http://allenn.cn/articles/2016-09/sed-usage/</id>
    <published>2016-09-17T11:27:03.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>
<h2 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed [option] &apos;command&apos; input_file</div></pre></td></tr></table></figure>
<p>常用的option有如下几种：</p>
<ul>
<li><code>-n</code> 使用安静(silent)模式。默认条件下，所有来自stdin的内容一般都会被列出到屏幕上。但如果加上-n参数后，则只有在脚本中使用<code>p</code>，被匹配的行才会被列出来，比如：<code>sed -n &#39;/&lt;HTML&gt;/p&#39;</code>（仅显示<html>这一行）；</html></li>
<li><code>-e</code> 用于执行多个编辑命令，如：<code>sed -e &#39;1,3s/my/your/g&#39; -e &#39;3,$s/This/That/g&#39; my.txt</code>；</li>
<li><code>-f</code> 从 script-file 中读取 sed 编辑命令，可以将多个编辑命令写在文件中，使用<code>sed -f script-file ...</code>读取；</li>
<li><code>-r</code> 让sed命令支持扩展的正则表达式(默认是基础正则表达式)；</li>
<li><code>-i</code> 直接修改读取的文件内容，默认下，sed 不会直接修改文件，当提供<code>-i</code>选项时 sed 会直接修改文件内容。</li>
</ul>
<a id="more"></a>
<p>常用的命令有以下几种：</p>
<ul>
<li><code>a \</code>： 在匹配的行下新起一行，追加字符串，<code>a \</code>的后面跟上字符串(多行字符串可以用<code>\n</code>分隔)；</li>
<li><code>c \</code>： 取代/替换字符串，<code>c \</code>后面跟上字符串s(多行字符串可以用<code>\n</code>分隔)，会将当前选中的行替换成字符串s；</li>
<li><code>d</code>： delete即删除，该命令会将当前选中的行删除；</li>
<li><code>i \</code>： insert即插入字符串，<code>i \</code>后面跟上字符串s(多行字符串可以用\n分隔)，则会在当前选中的行的前面都插入字符串s；</li>
<li><code>p</code>： print即打印，该命令会打印当前选择的行到屏幕上，通常同<code>-n</code>一起使用，打印选中的行；</li>
<li><code>s</code>： 替换，通常s命令的用法是这样的：s/old/new/g，将old字符串替换成new字符串</li>
</ul>
<h2 id="多个匹配"><a href="#多个匹配" class="headerlink" title="多个匹配"></a>多个匹配</h2><p>有时我们需要一次进行多次匹配，可参考下面的示例：（第一个模式把第一行到第三行的my替换成your，第二个则把第3行以后的This替换成了That）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;1,3s/my/your/g; 3,$s/This/That/g&apos; my.txt</div><div class="line">This is your cat, your cat&apos;s name is betty</div><div class="line">This is your dog, your dog&apos;s name is frank</div><div class="line">That is your fish, your fish&apos;s name is george</div><div class="line">That is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure>
<p>上面的命令等价于：（注：下面使用的是sed的-e命令行参数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed -e &apos;1,3s/my/your/g&apos; -e &apos;3,$s/This/That/g&apos; my.txt</div></pre></td></tr></table></figure>
<p>我们可以使用&amp;来当做被匹配的变量，然后可以在基本左右加点东西。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;s/my/[&amp;]/g&apos; my.txt</div><div class="line">This is [my] cat, [my] cat&apos;s name is betty</div><div class="line">This is [my] dog, [my] dog&apos;s name is frank</div><div class="line">This is [my] fish, [my] fish&apos;s name is george</div><div class="line">This is [my] goat, [my] goat&apos;s name is adam</div></pre></td></tr></table></figure>
<h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><p>假设有一个本地文件test.txt，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat test.txt</div><div class="line"></div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this fifth line</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本节将使用该文件详细演示每一个命令的用法。</p>
<h3 id="a命令"><a href="#a命令" class="headerlink" title="a命令"></a>a命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;1a \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">add one</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例命令部分中的1表示第一行，同样的第二行写成2，第一行到第三行写成<code>1,3</code>，用<code>$</code>表示最后一行，比如<code>2,$</code>表示第二行到最后一行中间所有的行(包含第二行和最后一行)。<br>本例的作用是在第一行之后增加字符串”add one”，从输出可以看到具体效果。需要注意的是在 Mac OS X 系统上，<code>a \</code>后的追加文本需要另起一行写，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;1a \</div><div class="line">&gt;add one&apos; test.txt</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;1,$a \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">add one</div><div class="line">this is second line</div><div class="line">add one</div><div class="line">this is third line</div><div class="line">add one</div><div class="line">this is fourth line</div><div class="line">add one</div><div class="line">this is fifth line</div><div class="line">add one</div><div class="line">happy everyday</div><div class="line">add one</div><div class="line">end</div><div class="line">add one</div></pre></td></tr></table></figure>
<p>本例表示在第一行和最后一行所有的行后面都加上”add one”字符串，从输出可以看到效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;/first/a \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">add one</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例表示在包含”first”字符串的行的后面加上字符串”add one”，从输出可以看到第一行包含first，所以第一行之后增加了”add one”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;/^ha.*day$/a \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">happy everyday</div><div class="line">add one</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例使用正则表达式匹配行，<code>^ha.*day$</code>表示以ha开头，以day结尾的行，则可以匹配到文件的”happy everyday”这样，所以在该行后面增加了”add one”字符串。</p>
<h3 id="i命令"><a href="#i命令" class="headerlink" title="i命令"></a>i命令</h3><p>i命令使用方法和a命令一样的，只不过是在匹配的行的前面插入字符串，所以直接将上面a命令的示例的a替换成i即可，在此就不啰嗦了。</p>
<h3 id="c命令"><a href="#c命令" class="headerlink" title="c命令"></a>c命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;$c \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is     fifth line</div><div class="line">happy everyday</div><div class="line">add one</div></pre></td></tr></table></figure>
<p>本例表示将最后一行替换成字符串”add one”，从输出可以看到效果。同<code>a</code>命令一样在 Mac OS X 系统上，<code>c \</code>后文本需要另起一行写，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;$c \</div><div class="line">&gt;add one&apos; test.txt</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;4,$c \add one&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">add one</div></pre></td></tr></table></figure>
<p>本例将第四行到最后一行的内容替换成字符串”add one”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;/^ha.*day$/c \replace line&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">replace line</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例将以ha开头，以day结尾的行替换成”replace line”。</p>
<h3 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;/^ha.*day$/d&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例删除以<code>ha</code>开头，以<code>day</code>结尾的行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;4,$d&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div></pre></td></tr></table></figure>
<p>本例删除第四行到最后一行中的内容。</p>
<h3 id="p命令"><a href="#p命令" class="headerlink" title="p命令"></a>p命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed -n &apos;4,$p&apos; test.txt</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例在屏幕上打印第四行到最后一行的内容，p命令一般和-n选项一起使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed -n &apos;/^ha.*day$/p&apos; test.txt</div><div class="line">happy everyday</div></pre></td></tr></table></figure>
<p>本例打印以<code>ha</code>开始，以<code>day</code>结尾的行。</p>
<h3 id="s命令"><a href="#s命令" class="headerlink" title="s命令"></a>s命令</h3><p>实际运用中s命令式最常使用到的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;s/line/text/g&apos; test.txt</div><div class="line">this is first text</div><div class="line">this is second text</div><div class="line">this is third text</div><div class="line">this is fourth text</div><div class="line">this is fifth text</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例将文件中的所有line替换成text，最后的<code>g</code>是global的意思，也就是全局替换，如果不加g，则只会替换本行的第一个line。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;/^ha.*day$/s/happy/very happy/g&apos; test.txt</div><div class="line">this is first line</div><div class="line">this is second line</div><div class="line">this is third line</div><div class="line">this is fourth line</div><div class="line">this is fifth line</div><div class="line">very happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>本例首先匹配以ha开始，以day结尾的行，本例中匹配到的行是”happy everyday”这样，然后再将该行中的happy替换成very happy。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;s/\(.*\)line$/\1/g&apos; test.txt</div><div class="line">this is first</div><div class="line">this is second</div><div class="line">this is third</div><div class="line">this is fourth</div><div class="line">this is fifth</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这个例子有点复杂，先分解一下。首先s命令的模式是s/old/new/g这样的，所以本例的old部分即<code>\(.*\)line$</code>，sed命令中使用<code>\(\)</code>包裹的内容表示正则表达式的第n部分，序号从1开始计算，本例中只有一个<code>\(\)</code>所以<code>\(.*\)</code>表示正则表达式的第一部分，这部分匹配任意字符串，所以<code>\(.*\)line$</code>匹配的就是以line结尾的任何行。然后将匹配到的行替换成正则表达式的第一部分（本例中相当于删除line部分），使用<code>\1</code>表示匹配到的第一部分，同样<code>\2</code>表示第二部分，<code>\3</code>表示第三部分，可以依次这样引用。比如下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sed &apos;s/\(.*\)is\(.*\)line/\1\2/g&apos; test.txt</div><div class="line">this  first</div><div class="line">this  second</div><div class="line">this  third</div><div class="line">this  fourth</div><div class="line">this  fifth</div><div class="line">happy everyday</div><div class="line">end</div></pre></td></tr></table></figure>
<p>正则表达式中is两边的部分可以用<code>\1</code>和<code>\2</code>表示，该例子的作用其实就是删除中间部分的is。</p>
<h2 id="一些关于-sed-的基础知识"><a href="#一些关于-sed-的基础知识" class="headerlink" title="一些关于 sed 的基础知识"></a>一些关于 sed 的基础知识</h2><p>前面通过实例说完了 sed 的运用，下面来说一些和 sed 相关的基础知识</p>
<h3 id="Pattern-Space"><a href="#Pattern-Space" class="headerlink" title="Pattern Space"></a>Pattern Space</h3><p>什么是Pattern Space，Pattern space相当于车间sed把流内容在这里处理，你可以将pattern space看成是一个流水线，所有的动作都是在“流水线”上执行的。不理解？没关系，我们来看看 sed 的伪代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">foreach line in file &#123;</div><div class="line">    //放入把行Pattern_Space</div><div class="line">    Pattern_Space &lt;= line;</div><div class="line"></div><div class="line">    // 对每个pattern space执行sed命令</div><div class="line">    Pattern_Space &lt;= EXEC(sed_cmd, Pattern_Space);</div><div class="line"></div><div class="line">    // 如果没有指定 -n 则输出处理后的Pattern_Space</div><div class="line">    if (sed option hasn&apos;t &quot;-n&quot;)  &#123;</div><div class="line">       print Pattern_Space</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/assets/images/sed-usage/pattern-space.png" alt="sed 执行流程图"></p>
<h3 id="Hold-Space"><a href="#Hold-Space" class="headerlink" title="Hold Space"></a>Hold Space</h3><p>什么是Hold Space？Hold space相当于仓库，加工的半成品在这里临时储存。由于各种各样的原因，比如用户希望在某个条件下脚本中的某个命令被执行，或者希望模式空间得到保留以便下一次的处理，都有可能使得sed在处理文件的时候不按照正常的流程来进行。这个时候，sed设置了一些高级命令来满足用户的要求。</p>
<ul>
<li>g：[address[,address]]g 将hold space中的内容拷贝到pattern space中，原来pattern space里的内容清除</li>
<li>G：[address[,address]]G 将hold space中的内容append到pattern space后</li>
<li>h：[address[,address]]h 将pattern space中的内容拷贝到hold space中，原来的hold space里的内容被清除</li>
<li>H：[address[,address]]H 将pattern space中的内容append到hold space后</li>
<li>x： 交换pattern space和hold space的内容</li>
</ul>
<p>那么这些命令怎么用呢，我们来看些例子，示例文件如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cat t.txt</div><div class="line">one</div><div class="line">two</div><div class="line">three</div></pre></td></tr></table></figure></p>
<p>如果我需要使用 sed 完成文件倒序输出要怎么做呢？你可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed &apos;1!G;h;$!d&apos; t.txt</div></pre></td></tr></table></figure>
<p>其中的 ‘1!G;h;$!d’ 可拆解为三个命令</p>
<ul>
<li><code>1!G</code> —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li>
<li><code>h</code> —— 第一行都执行h命令，将pattern space中的内容拷贝到hold space中</li>
<li><code>$!d</code> —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li>
</ul>
<p><img src="/assets/images/sed-usage/sed_demo.jpg" alt="执行序列"></p>
<h3 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h3><p>通过 Address 可以指定 Sed 地址/操作范围，Address 可以是一个数字，也可以是一个模式。用逗号分割两个 Address 表示匹配两个 Address 的区间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[address[,address]][!]&#123;cmd&#125;</div></pre></td></tr></table></figure>
<p>其中的!表示匹配成功后是否执行命令，Address 也可以使用相对位置，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 其中的+3表示后面连续3行</div><div class="line">$ sed &apos;/dog/,+3s/^/# /g&apos; pets.txt</div><div class="line">This is my cat</div><div class="line">  my cat&apos;s name is betty</div><div class="line"># This is my dog</div><div class="line">#   my dog&apos;s name is frank</div><div class="line"># This is my fish</div><div class="line">#   my fish&apos;s name is george</div><div class="line">This is my goat</div><div class="line">  my goat&apos;s name is adam</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。&lt;/p&gt;
&lt;h2 id=&quot;使用语法&quot;&gt;&lt;a href=&quot;#使用语法&quot; class=&quot;headerlink&quot; title=&quot;使用语法&quot;&gt;&lt;/a&gt;使用语法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sed [option] &amp;apos;command&amp;apos; input_file&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常用的option有如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 使用安静(silent)模式。默认条件下，所有来自stdin的内容一般都会被列出到屏幕上。但如果加上-n参数后，则只有在脚本中使用&lt;code&gt;p&lt;/code&gt;，被匹配的行才会被列出来，比如：&lt;code&gt;sed -n &amp;#39;/&amp;lt;HTML&amp;gt;/p&amp;#39;&lt;/code&gt;（仅显示&lt;HTML&gt;这一行）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; 用于执行多个编辑命令，如：&lt;code&gt;sed -e &amp;#39;1,3s/my/your/g&amp;#39; -e &amp;#39;3,$s/This/That/g&amp;#39; my.txt&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 从 script-file 中读取 sed 编辑命令，可以将多个编辑命令写在文件中，使用&lt;code&gt;sed -f script-file ...&lt;/code&gt;读取；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 让sed命令支持扩展的正则表达式(默认是基础正则表达式)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 直接修改读取的文件内容，默认下，sed 不会直接修改文件，当提供&lt;code&gt;-i&lt;/code&gt;选项时 sed 会直接修改文件内容。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://allenn.cn/tags/Linux/"/>
    
      <category term="Shell" scheme="http://allenn.cn/tags/Shell/"/>
    
      <category term="sed" scheme="http://allenn.cn/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>由 Java 到 Scala：如何优雅的跳出循环</title>
    <link href="http://allenn.cn/articles/2016-09/how-to-break-loop-scala/"/>
    <id>http://allenn.cn/articles/2016-09/how-to-break-loop-scala/</id>
    <published>2016-09-16T11:27:03.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，我们经常会遇到这样的需求：循环执行某个操作，当满足一定条件的时候循环终止。最常见的场景就是累加数组中的元素，一直到大于某个值，用伪代码来描述就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DO LOOP&#123;</div><div class="line">  DO SOME THING</div><div class="line">  IF SOME CONDITION</div><div class="line">    BREAK</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果我们使用 Java 来完成这样的需求，我们会这样完成我们的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// List[1,2,3,4,5,6]</span></div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i ++)&#123;</div><div class="line">  sum += list.get(i);</div><div class="line">  <span class="keyword">if</span>(sum &gt; <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Java 中，我们用一个<code>break</code>语句，就完成的从循环中跳出的工作。但在 Scala 中我们应该怎么做呢？要知道 Scala 特地没有在内置控制结构中包含 break 和 continue 是因为这两个控制结构和函数式编程有点格格不入。那么下面我将介绍几种在 Scala 中跳出循环的方法。</p>
<h3 id="使用Return语句"><a href="#使用Return语句" class="headerlink" title="使用Return语句"></a>使用Return语句</h3><p>没有<code>break</code>语句，那么作为 Java 的开发人员，第一时间就会想到<code>return</code>，还好 Scala 支持<code>return</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="comment">// List[1,2,3,4,5,6]</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">list.foreach(i =&gt;&#123;</div><div class="line">  sum += i</div><div class="line">  <span class="keyword">if</span>(sum &gt; <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="使用Breaks"><a href="#使用Breaks" class="headerlink" title="使用Breaks"></a>使用Breaks</h3><p>在 Scala 2.8以上版本中，Scala 增加了<code>scala.util.control.Breaks</code>包，通过导入这个包，你可以在 Scala 中写出和 Java 中相似的带<code>break</code>语句的循环。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.util.control.<span class="type">Breaks</span>._</div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">breakable &#123;</div><div class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to <span class="number">6</span>) &#123;</div><div class="line">   sum += i</div><div class="line">   <span class="keyword">if</span> (sum &gt;= <span class="number">4</span>) <span class="keyword">break</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，这并不代表 Scala 从 2.8 版本开始支持<code>break</code>语句，它的实现实际是通过抛出异常给上级调用函数来达到控制循环的目的。<code>Breaks</code>的关键代码如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakable</span></span>(op: =&gt; <span class="type">Unit</span>) &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    op</div><div class="line">  &#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="keyword">case</span> ex: <span class="type">BreakControl</span> =&gt;</div><div class="line">      <span class="keyword">if</span> (ex ne breakException) <span class="keyword">throw</span> ex</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，使用<code>Breaks</code>就等价于下面的代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">AllDone</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123; &#125;</div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to <span class="number">6</span>) &#123; sum += i; <span class="keyword">if</span> (sum&gt;=<span class="number">4</span>) <span class="keyword">throw</span> <span class="type">AllDone</span> &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">AllDone</span> =&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一些优雅的方法"><a href="#一些优雅的方法" class="headerlink" title="一些优雅的方法"></a>一些优雅的方法</h2><p>上面的方法虽然可以达到我们的目的，但和优雅还是差点距离，下面就回到我们的主题：如何优雅的跳出循环。</p>
<h3 id="使用-Stream"><a href="#使用-Stream" class="headerlink" title="使用 Stream"></a>使用 Stream</h3><p>Stream 是个很有意思的结构，它和列表相似，只不过它会延迟计算下一个元素，仅当需要的时候才会去计算。运用 Stream 的这个特性，我们可以用一种优雅的方式达到我们跳出循环的目的</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">(<span class="number">0</span> to <span class="number">6</span>).toStream.takeWhile(_ =&gt; sum &lt; <span class="number">4</span>).foreach(i =&gt; sum+=i)</div></pre></td></tr></table></figure>
<p>你可能会觉得这个程序有 Bug，因为咋一看<code>takeWhile</code>中并没有进行累加，只比较了<code>sum &lt; 4</code>，而累加是在<code>foreach</code>中做的，<code>takeWhile</code>的条件应该永远为<code>true</code>，导致最后的结果是错误的。那么到底会不会这样呢？答案是：不会。因为 Stream 是 Lazy 的，它会延迟计算下一个元素，在这个例子中，<code>takeWhile(_ =&gt; sum &lt; 4)</code>只会在每次<code>foreach</code>需要取 Stream 中的一个元素出来累加的时候才会执行一次，这就保证了判断条件的有效性。大致的执行序列如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// List[1,2,3,4,5,6]</div><div class="line">var sum = 0</div><div class="line">takeWhile(_ =&gt; 0 &lt; 4)</div><div class="line">foreach(1 =&gt; 0+=1)</div><div class="line">var sum = 1</div><div class="line">takeWhile(_ =&gt; 1 &lt; 4)</div><div class="line">foreach(2 =&gt; 1+=2)</div><div class="line">....</div></pre></td></tr></table></figure>
<h3 id="使用递归代替循环"><a href="#使用递归代替循环" class="headerlink" title="使用递归代替循环"></a>使用递归代替循环</h3><p>还有一种方法就是使用递归代替循环</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTo</span></span>(i: <span class="type">Int</span>, max: <span class="type">Int</span>) &#123;</div><div class="line">  sum += i; <span class="keyword">if</span> (sum &lt; max) addTo(i+<span class="number">1</span>,max)</div><div class="line">&#125;</div><div class="line">addTo(<span class="number">0</span>,<span class="number">6</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，我们经常会遇到这样的需求：循环执行某个操作，当满足一定条件的时候循环终止。最常见的场景就是累加数组中的元素，一直到大于某个值，用伪代码来描述就是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DO LOOP&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  DO SOME THING&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  IF SOME CONDITION&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BREAK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="Scala" scheme="http://allenn.cn/tags/Scala/"/>
    
      <category term="跳出循环" scheme="http://allenn.cn/tags/%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>为什么java.util.concurrent 包里没有并发的ArrayList实现？</title>
    <link href="http://allenn.cn/articles/2016-09/why-not-concurrency-arraylist/"/>
    <id>http://allenn.cn/articles/2016-09/why-not-concurrency-arraylist/</id>
    <published>2016-09-07T11:27:03.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>问：JDK 5在 java.util.concurrent 里引入了 ConcurrentHashMap，在需要支持高并发的场景，我们可以使用它代替 HashMap。但是为什么没有 ArrayList 的并发实现呢？难道在多线程场景下我们只有 Vector 这一种线程安全的数组实现可以选择么？为什么在 java.util.concurrent 没有一个类可以代替 Vector 呢？</p>
<p>答：我认为在 java.util.concurrent 包中没有加入并发的 ArrayList 实现的主要原因是：很难去开发一个通用并且没有并发瓶颈的线程安全的 List。像 ConcurrentHashMap 这样的类的真正价值（The real point / value of classes）并不是它们保证了线程安全。而在于它们在保证线程安全的同时不存在并发瓶颈。举个例子，ConcurrentHashMap 采用了锁分段技术和弱一致性的Map迭代器去规避并发瓶颈。所以问题在于，像“Array List”这样的数据结构，你不知道如何去规避并发的瓶颈。拿contains() 这样一个操作来说，当你进行搜索的时候如何避免锁住整个 list？另一方面，Queue 和 Deque (基于Linked List)有并发的实现是因为他们的接口相比List的接口有更多的限制，这些限制使得实现并发成为可能。CopyOnWriteArrayList 是一个有趣的例子，它规避了只读操作（如 get/contains）并发的瓶颈，但是它为了做到这点，在修改操作中做了很多工作和修改可见性规则。 此外，修改操作还会锁住整个List，因此这也是一个并发瓶颈。所以从理论上来说，CopyOnWriteArrayList 并不算是一个通用的并发 List。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问：JDK 5在 java.util.concurrent 里引入了 ConcurrentHashMap，在需要支持高并发的场景，我们可以使用它代替 HashMap。但是为什么没有 ArrayList 的并发实现呢？难道在多线程场景下我们只有 Vector 这一种线程安全的
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="多线程" scheme="http://allenn.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="http://allenn.cn/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>玩花招的PowerMock</title>
    <link href="http://allenn.cn/articles/2016-09/play-trick-with-powermock/"/>
    <id>http://allenn.cn/articles/2016-09/play-trick-with-powermock/</id>
    <published>2016-09-01T15:31:03.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载至：<a href="http://agiledon.github.io/blog/2013/11/21/play-trick-with-powermock/" target="_blank" rel="external">逸言</a>，感谢原作者的精彩分享</p>
<p>当我们面对一个遗留系统时，常见的问题是没有测试。正如Michael Feathers在Working Effectively with Legacy Code一书中对“遗留代码”的定义。他将其简单归纳为“没有测试的代码”。真是太贴切了！正是因为没有测试，使得我们对遗留代码的任何重构都有些战战兢兢，甚至成为开发人员抵制重构的借口。从收益与成本的比例来看，对于这样的系统，我一贯认为不要盲目进行重构。因为重构的真正适用场景其实是发生在开发期间，而非维护期间。当然，提升自己的重构能力，尤其学会运用IDE提供的自动重构工具，可以在一定程度上保障重构的质量。然而，安全的做法，还是需要为其编写测试。</p>
<a id="more"></a>
<p>测试是分层的，即使是针对自动化测试。面对遗留系统，成本相对较低的是针对功能特性编写的功能测试（或者说是验收测试），这可以运用一些BDD框架如Cucumber、JBehave等。由于它的测试粒度较粗，可以以较少的测试用例覆盖系统的主要功能。然而，它的缺点同样存在，那就是反馈周期相对较长。这就好像你置身一个陌生的城市，在找不到路的情况下，只是跟着感觉走。走了数十公里之后，方才幡然醒悟，想起要翻一翻带在手上的地图。倘若发现方向走错，再要回转就已经晚了。反馈周期最短的自然是单元测试。同样根据Michael Feather的定义，单元测试一定要快，一定要不依赖于外部资源。单元测试的粒度自然是最小的，但不要直观地认为单元测试就是针对方法。若只是针对方法来编写单元测试，就会陷入为测试而测试的怪圈。即使是位于技术象限的单元测试，我们仍然要按照业务规则来编写。一个测试方法应该对应一个粒度最小的原子功能。</p>
<p>要让单元测试跑得快，还要不吃草（依赖外部资源），应该怎么办？答案呼之欲出，那就是Mock。Mock当然不是万能的，记得胡凯写过一篇文章，提及Mock不是银弹。我知道他仅仅是为了强调这个观点，避免太多人过于依赖Mock，因为Brooks早就发表过论断，在软件行业，其实根本就“没有银弹”。关于Mock的争论由来已久，对此，我准备避而不谈。至少在我看来，如下几点基本已成定论：</p>
<p>1、是Mock行为，而非Mock数据；如果是针对数据，则应该属于Stub的范畴；</p>
<p>2、Mock通常发生在三种情况（让我们假设被测试对象为消费者，它要协作的对象为服务，此时需要Mock服务）：服务的行为只有定义，还未实现；服务需要访问外部资源（这意味着它可能很慢，也意味着它需要依赖外部资源）；服务的行为结果不确定（例如天气服务，股票服务）。</p>
<p>自然，我们不需要自己写Mock，有许多现成的好用框架，例如Java平台下的Mockito与EasyMock，.NET平台下的Moq，以及C++下的Google Mock和MockCpp。</p>
<p>然而，问题依然存在。考虑这样两种情况：</p>
<p>1、当我们要Mock的服务，其实是Utils的静态方法时，应该怎么办？</p>
<p>2、当我们要测试的方法内部直接实例化了协作的服务对象，又该怎么办？</p>
<p>显然，这是设计和代码的坏味道，它明显违背了DIP原则，即它不应该依赖于细节，而应该依赖于抽象。换言之，它产生了对服务对象的具体依赖。若要遵循DIP，就应该在被测对象的外部来注入依赖。这种紧耦合酿成了我们设计的类不具备良好的可测试性。</p>
<p>一个蠢蠢欲动的声音在说：让我们重构吧！且住，先让我们把这苛求的眼光放柔和一点。当你视所有丑陋的代码为“蝼蚁”时，那是因为你站在了足够的高度。可是站得太高，往往摔得更惨。现在，还是脚踏实地，先设身处地地考虑这样的场景：这是一个代码行数超过1000万行的软件系统，一共有十余个开发团队，一百多名开发人员在这个团队中工作。这个系统几乎没有测试，而系统的Jar包则达到上千个。这些Utils的静态方法被数十乃至上百个类调用，牵涉到的模块也有多个甚至十余个。而且，这个系统并没有引入任何一个IoC容器。有了这样一个背景，让我们再把柔和的眼光变得锐利一点，分析分析重构的可行性。要消除前面提到的坏味道，就需要将这些静态方法修改为实例方法，并通过依赖注入的方式注入。这个变化带来的是对整个系统的全局影响，即使我们有一些自动化重构的手段，仍然不认为这种重构一定就是可行的。</p>
<p>这就是我要谈PowerMock的前提！</p>
<p>现在，轮到玩花招的PowerMock出场了。有了它，什么静态方法，方法内部实例，乃至私有方法，统统都是浮云。而且，它对Mockito与EasyMock的扩展，使得我们更容易熟悉它的语法。要使用它很简单，需先设置对它的依赖。我选择了PowerMock针对Mockito的扩展：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-api-mockito<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>让我先给出如下的一份奇奇怪怪的设计，它主要是为了迎合之前提到的代码臭味。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTableUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (existed(employee.getId())) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExistedEmployeeException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//insert employee</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (employee == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullEmployeeException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (existed(employee.getId())) &#123;</div><div class="line">            <span class="comment">//delete employee</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">existed</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRepository</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EmployeeTableUtil tableUtil;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmployeeTableUtil().count();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> EmployeeTableUtil.findAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tableUtil.insert(employee);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (ExistedEmployeeException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            EmployeeTableUtil.update(employee);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (NullEmployeeException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tableUtil.delete(employee);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">bonus</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> employee.getSalary() * <span class="number">0.1</span>d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableUtil</span><span class="params">(EmployeeTableUtil tableUtil)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tableUtil = tableUtil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我要针对EmployeeRepository编写测试，它协作的服务类为EmployeTableUtil，主要承担了访问数据库的职责。在测试EmployeeRepository时，我们需要去Mock协作对象EmployeeTableUtil的行为。</p>
<p>在使用PowerMock编写测试时，首先需要在测试类上运用框架提供的Annotation：@PrepareForTest，以及一个Runner：PowerMockRunner。因为我们要Mock的对象为EmployeeTableUtil，故而测试类的定义为：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</div><div class="line"><span class="meta">@PrepareForTest</span>(EmployeeTableUtil.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRepositoryTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EmployeeRepository repository;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        repository = <span class="keyword">new</span> EmployRepository();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我要使用PowerMock去Mock静态方法，如EmployeeTableUtil的findAll()方法，至于要测试的方法则为EmployeeRepository的findAll()方法。则编写的单元测试为：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_mock_static_method</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Employee&gt; employee = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</div><div class="line">    employee.add(<span class="keyword">new</span> Employee(<span class="string">"1"</span>));</div><div class="line">    employee.add(<span class="keyword">new</span> Employee(<span class="string">"2"</span>));</div><div class="line"></div><div class="line">    PowerMockito.mockStatic(EmployeeTableUtil.class);</div><div class="line">    when(EmployeeTableUtil.findAll()).thenReturn(employee);</div><div class="line"></div><div class="line">    List&lt;Employee&gt; employees = repository.findAll();</div><div class="line">    assertThat(employees.size(), is(<span class="number">2</span>));</div><div class="line">    assertThat(employees.get(<span class="number">0</span>).getId(), is(<span class="string">"1"</span>));</div><div class="line">    assertThat(employees.get(<span class="number">1</span>).getId(), is(<span class="string">"2"</span>));</div><div class="line"></div><div class="line">    PowerMockito.verifyStatic();</div><div class="line">    EmployeeTableUtil.findAll();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Mock静态方法的关键是先要调用框架定义的PowerMockito类的mockStatic()方法（针对EasyMock有相似的类）。方法接收的参数就是我们要Mock的类的类型。接下来就可以调用Mockito框架的方法，对我们要模拟的方法findAll()进行模拟，这里主要的工作是为模拟方法的返回值设置一个stub。之后就是单元测试的验证逻辑。如果需要验证被Mock的方法是否被调用，则需要调用PowerMockito.verifyStatic()方法，紧随其后的是被mock的方法。</p>
<p>如果要Mock的方法是一个命令方法（即没有返回值的方法），做法又有不同。倘若熟悉Mockito，可以看出PowerMock完全沿袭了Mockito的风格（当然，针对EasyMock的扩展则会沿袭EasyMock的风格，这是PowerMock体贴人的地方）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_mock_exception_for_command_method_in_mock_object</span><span class="params">()</span> </span>&#123;</div><div class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="string">"1"</span>);</div><div class="line"></div><div class="line">        PowerMockito.mockStatic(EmployeeTableUtil.class);</div><div class="line">        PowerMockito.doThrow(<span class="keyword">new</span> NullEmployeeException()).when(EmployeeTableUtil.class);</div><div class="line">        EmployeeTableUtil.update(employee);</div><div class="line"></div><div class="line">        assertThat(repository.update(employee), is(<span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line">PowerMock还可以Mock私有方法，当然只能是实例的私有方法。这主要发生在当我们不希望Mock服务的公开方法时（例如，公开方法的逻辑没有Mock的必要），但这些公开方法的内部又调用了自己的私有方法，而私有方法却需要Mock。例如，EmployeeTableUtil的insert()和delete()方法调用了私有的existed()方法。假设insert()和delete()方法不需要我们Mock，此时就需要对私有方法existed()进行Mock。因为是实例方法，所以下面的测试方法通过调用setTableUtil()方法将被模拟的对象注入到EmployeeRepository对象中：</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_mock_private_method</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="string">"1"</span>);</div><div class="line"></div><div class="line">        EmployeeTableUtil util = PowerMockito.spy(<span class="keyword">new</span> EmployeeTableUtil());</div><div class="line">        PowerMockito.when(util,<span class="string">"existed"</span>, anyString())</div><div class="line">                .thenReturn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        repository.setTableUtil(util);</div><div class="line"></div><div class="line">        assertThat(repository.insert(employee), is(<span class="keyword">false</span>));</div><div class="line">        assertThat(repository.delete(employee), is(<span class="keyword">true</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>PowerMock顺带还提供了测试私有方法的便捷办法（注意是测试，而不是Mock）。例如，测试EmployeeReployee类的私有方法bonus()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_test_private_method</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="string">"1"</span>);</div><div class="line">    employee.setSalary(<span class="number">8000</span>);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> result = Whitebox.&lt;Double&gt;invokeMethod(repository, <span class="string">"bonus"</span>, employee);</div><div class="line">    assertThat(result, is(<span class="number">800</span>d));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再来看看另外一种诡异的手段。假设我们要测试的方法其内部调用了协作对象的方法，而该协作对象不是在外部注入的，而是在方法中直接实例化。例如在前面例子中，EmployeeRepository的count()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRepository</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EmployeeTableUtil tableUtil;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmployeeTableUtil().count();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要针对这样一种情形进行Mock，做法有所不同。因为它实际针对的是待测类——即这里的EmployeeRepository——执行count()方法，这就需要在count()方法内部形成一个拦截点。因此，需要在@PrepareForTest标记中指向EmployeeRepository类的类型，而非我们要Mock的EmployeeTableUtil。故而，我们需要为这个测试定义一个新的测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</div><div class="line"><span class="meta">@PrepareForTest</span>(EmployeeRepository.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructionEmployeeRepositoryTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_mock_construction_object</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        EmployeeTableUtil util = mock(EmployeeTableUtil.class);</div><div class="line">        when(util.count()).thenReturn(<span class="number">100</span>);</div><div class="line"></div><div class="line">        PowerMockito.whenNew(EmployeeTableUtil.class).withNoArguments().thenReturn(util);</div><div class="line"></div><div class="line">        EmployeeRepository repository = <span class="keyword">new</span> EmployeeRepository();</div><div class="line">        assertThat(repository.count(), is(<span class="number">100</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，测试方法的前两行代码调用的mock()与when()方法都是Mockito提供的方法，与PowerMock无关。</p>
<p>我虽然没有看过PowerMock的源代码，但我猜测，当我们在使用PowerMock去Mock静态方法时，定然是结合反射与代理的方式来完成对该方法的调用，其中必然需要初始化该类。由于是静态方法，更多的是需要静态初始化。此外，还有一种情形时，你所要测试的类声明和初始化了一个静态的字段。这些都可能需要调用静态初始化。我们在开发中就碰到一种情形是，我们希望Mock的一个类，定义了一个static块，其中又调用了私有的静态方法。在这个私有静态方法中，依赖了其他的一些对象，这些对象还牵扯到服务容器的问题。即使以静态的方式Mock了该类，仍然逃不过运行static块的命运，换言之，仍然需要依赖服务容器。这时，又可以祭出PowerMock的杀器了。它提供了@SuppressStaticInitializationFor的标注，在该标注中需要传入字符串类型的目标类型的全名。假设EmployeeTableUtil有一个static块是我们需要绕过的，它的类全名为com.agiledon.powermock.EmployeeTableUtil：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</div><div class="line"><span class="meta">@PrepareForTest</span>(EmployeeTableUtil.class)</div><div class="line"><span class="meta">@SuppressStaticInitializationFor</span>(<span class="string">"com.agiledon.powermock.EmployeeTableUtil"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRepositoryTest</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>此外，对于@PrepareForTest以及@SuppressStaticInitializationFor标记而言，如果需要针对多个类型，则需要传入一个数组，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</div><div class="line"><span class="meta">@PrepareForTest</span>(&#123;MockedObjectA.class, MockObjectB.class&#125;)</div><div class="line"><span class="meta">@SuppressStaticInitializationFor</span>(&#123;<span class="string">"com.agiledon.powermock.MockedObjectA"</span>, <span class="string">"com.agiledon.powermock.MockedObjectB"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneTest</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>或许我已经变得像祥林嫂一般的唠叨，但我还是必须再次申明，以上Mock方式所针对的情形皆为设计与代码的坏味道。优先情况下，我们应该重构，使得它遵循DIP原则，解除对服务类的耦合，使其具有良好的可测试性；而不能因为有了强大的PowerMock而“姑息养奸”。换言之，让我们仅仅将PowerMock耍弄的种种花招，看做是压箱底的手段。实在走投无路了，再祭出你的杀手锏吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载至：&lt;a href=&quot;http://agiledon.github.io/blog/2013/11/21/play-trick-with-powermock/&quot;&gt;逸言&lt;/a&gt;，感谢原作者的精彩分享&lt;/p&gt;
&lt;p&gt;当我们面对一个遗留系统时，常见的问题是没有测试。正如Michael Feathers在Working Effectively with Legacy Code一书中对“遗留代码”的定义。他将其简单归纳为“没有测试的代码”。真是太贴切了！正是因为没有测试，使得我们对遗留代码的任何重构都有些战战兢兢，甚至成为开发人员抵制重构的借口。从收益与成本的比例来看，对于这样的系统，我一贯认为不要盲目进行重构。因为重构的真正适用场景其实是发生在开发期间，而非维护期间。当然，提升自己的重构能力，尤其学会运用IDE提供的自动重构工具，可以在一定程度上保障重构的质量。然而，安全的做法，还是需要为其编写测试。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://allenn.cn/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="单元测试" scheme="http://allenn.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="PowerMock" scheme="http://allenn.cn/tags/PowerMock/"/>
    
  </entry>
  
  <entry>
    <title>Allen&#39;s Blogs 创建历程（1）</title>
    <link href="http://allenn.cn/articles/2016-08/make-mine-blogs-1/"/>
    <id>http://allenn.cn/articles/2016-08/make-mine-blogs-1/</id>
    <published>2016-08-30T08:21:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>很早很早以前我就开始玩博客，陆陆续续注册了很多平台，比如博客中国、cnblogs、javeeye（现在叫iteye）、csdn，也零零散散写了一些文章，不过没有坚持多久，工作忙起来后就不再更新，自我回顾一下好像还真没有什么干货，只算是给互联网里堆了一串01010101的数据罢了。那为什么最近又动了写 Blogs 的心思，原因是最近读了一本书，书名是：<a href="http://product.china-pub.com/4971248" target="_blank" rel="external">《软技能：代码之外的生存指南》</a>，里面<em>第二篇：自我营销</em>中讲到程序员自我营销的重要性，其中一点就提到了写 Blogs。总结来说，程序员写写 Blogs 不仅是自我营销的一种方式，还是一种很好的学习方式，不是说知识能说出来才算学到了么。</p>
<a id="more"></a>
<h2 id="Jekyll-amp-GitHub-Pages"><a href="#Jekyll-amp-GitHub-Pages" class="headerlink" title="Jekyll &amp; GitHub Pages"></a>Jekyll &amp; GitHub Pages</h2><p>自我总结一下，之前没有坚持下来很大一个原因就是一个字：“懒”，再加上之前的那些 Blogs 系统多多少少会有点不足。我也曾经尝试过购买 VPS 主机，自己搭建 Blogs，我甚至还为之购买了域名，可是后来发现，为何 VPS 是何等的费时费力。要安装软件，要安装数据库，还要防止被盗链导致流量不够用，哎，都是泪，不说了。到最近，无意中看到一篇译文，似乎是<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html" target="_blank" rel="external">《像黑客一样写博客》</a>，瞬间就被带上车了，开始使用 Jekyll 和 GitHub Pages 架设我的静态博客。</p>
<p>要在使用 GitHub Pages 服务，首先需要创建一个名字叫 “[你的用户名].github.io” 的项目：</p>
<p><img src="/assets/images/make-mine-blogs-1/user-repo@2x.png" alt="图片来自：GitHub"></p>
<p>接着把新建好的项目 Clone 下来，有两种方式 Clone 项目，一种是点击项目右上角的绿色“Set up in desktop”按钮使用 Github 客户端 Clone 项目；另外一种就是通过终端命令行来 Clone 项目。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [you project addr] [your locale dir]</div></pre></td></tr></table></figure>
<p>Clone 完成后，需要在本地搭建 Jekyll 的写作环境，正式开启静态博客之旅。</p>
<h3 id="Jekyll-环境准备"><a href="#Jekyll-环境准备" class="headerlink" title="Jekyll 环境准备"></a>Jekyll 环境准备</h3><p>首先安装必要工具</p>
<ul>
<li>Ruby：Mac OS X 10.5以上都自带</li>
<li>RubyGems：Mac OS X 10.5以上都自带</li>
<li>Xcode Command-Line Tools： 安装Xcode会自动安装，检查Preferences → Downloads → Components是否有Command-Line Tools这项提供下载，如果没有说明已安装</li>
<li>git：命令行输入git –version检查是否已安装，下载地址：<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">http://sourceforge.net/projects/git-osx-installer/</a></li>
</ul>
<p>在国内 gem 源地址可能已经被墙（万恶的 GFW），所以你可能需要将 gem 源替换为淘宝的镜像源：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">// 移除官方镜像源</div><div class="line">$ gem sources --remove https://rubygems.org/</div><div class="line">// 添加淘宝镜像源，或者其他镜像地址</div><div class="line">$ gem sources <span class="_">-a</span> http://ruby.taobao.org/</div><div class="line">// 验证是否替换成功</div><div class="line">$ gem sources <span class="_">-l</span></div></pre></td></tr></table></figure>
<p>如果终端中出现下面的显示则代表替换成功。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">*** CURRENT SOURCES ***</div><div class="line">http://ruby.taobao.org/</div></pre></td></tr></table></figure>
<p>接着开始安装 Jekyll</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">// 更新下 gem</div><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<p>MAC 系统版本如果是 El Capitan 使用下面这个命令。这是因为 Apple 在 OS X El Capitan 中全面启用了名为 System Integrity Protection (SIP) 的系统完整性保护技术。受此影响，大部分系统文件即使在 root 用户下也无法直接进行修改，所以需要把安装路径替换为用户有写入权限的目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">sudo gem update -n /usr/<span class="built_in">local</span>/bin --system</div></pre></td></tr></table></figure>
<p>如果你嫌每次都要打安装路径比较麻烦，你也可以把它变成默认配置，在用户根目录下创建一个名为<code>.gemrc</code>的文件，在里面写入<code>gem: -n/usr/local/bin</code>，并保存。或者使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo &quot;gem: -n/usr/local/bin&quot; &gt;&gt; ~/.gemrc</div></pre></td></tr></table></figure>
<p>接下来安装 Jekyll</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ sudo gem install jekyll</div><div class="line">// 如果提示权限错误，请使用下面的命令</div><div class="line">$ sudo gem install jekyll -n /usr/<span class="built_in">local</span>/bin</div></pre></td></tr></table></figure>
<p>OK，这样 Jekyll 环境就安装完成了，接下来导入 Jekyll 后，就可以开始写作了。在网络上有很多漂亮的 Jekyll 主题可供你选择，你可以访问<a href="http://jekyllthemes.io/" target="_blank" rel="external">jekyllthemes.io</a>找到你喜欢的主题并下载下来，或者通过 Google 搜索，如果还不满意，你也可以选择自己创建一个主题。选择好你喜欢的 Jekyll 的主题后，将主题复制到前面从 Github 上 Clone 的项目文件夹中去。一个典型的 Jekyll Blogs 的目录结构应该如下面所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── _drafts</div><div class="line">|   ├── begin-with-the-crazy-ideas.textile</div><div class="line">|   └── on-simplicity-in-technology.markdown</div><div class="line">├── _includes</div><div class="line">|   ├── footer.html</div><div class="line">|   └── header.html</div><div class="line">├── _layouts</div><div class="line">|   ├── default.html</div><div class="line">|   └── post.html</div><div class="line">├── _posts</div><div class="line">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</div><div class="line">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</div><div class="line">├── _data</div><div class="line">|   └── members.yml</div><div class="line">├── _site</div><div class="line">├── .jekyll-metadata</div><div class="line">└── index.html</div></pre></td></tr></table></figure>
<p>在该目录下执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ jekyll server // 简写 jekyll s</div></pre></td></tr></table></figure>
<p>在浏览器地址栏中输入：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可以看到刚才新建的 Blog 长什么样子了。在这里新增、修改、删除文章都可以实时的看到，只需要刷新页面即可。你可以试着修改那篇默认文章看看效果。</p>
<h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>Jekyll 博客的配置全在 Blogs 根目录的<code>_config.yml</code>文件中，一般来说，只要没有什么特殊的需求，只需要修改诸如：博客名、所有者名字、email等信息即可，如果有更多的需求，请参考所用主题的说明和 Jekyll 的文档：<a href="https://jekyllrb.com/docs/configuration/" target="_blank" rel="external">https://jekyllrb.com/docs/configuration/</a>。我的 Blog 的基本配置如下，可以参考：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">name:</span> Allen</div><div class="line"><span class="attr">description:</span> Blogging about stuffs</div><div class="line"><span class="attr">meta_description:</span> <span class="string">"Allen's Blog"</span></div><div class="line"></div><div class="line"><span class="attr">markdown:</span> krmark</div><div class="line"><span class="attr">redcarpet:</span></div><div class="line"></div><div class="line"><span class="attr">highlighter:</span> pygments</div><div class="line"><span class="attr">logo:</span> <span class="literal">false</span></div><div class="line"><span class="attr">paginate:</span> <span class="number">20</span></div><div class="line"><span class="attr">baseurl:</span> /</div><div class="line"><span class="attr">domain_name:</span> <span class="string">'http://allenn.cn/'</span></div><div class="line"><span class="attr">google_analytics:</span> <span class="string">'UA-XXXXXXXX-X'</span></div><div class="line"></div><div class="line"><span class="comment"># Details for the RSS feed generator</span></div><div class="line"><span class="attr">url:</span>            <span class="string">'/rss.xml'</span></div><div class="line"><span class="attr">author:</span>         <span class="string">'Allen'</span></div></pre></td></tr></table></figure>
<p>好了，一切准备就绪，我们可以开始写作了。按照 Jekyll 的规范，文章是放在<code>_posts</code>目录下的，并且需要以时间戳开头，比如：<code>2007-10-29-why-every-programmer-should-play-nethack.md</code>，在文章的开头，需要增加一些描述性的东西，这样 Jekyll 才能正确的处理我们写的文章。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">layout: post</div><div class="line">title:  &quot;在多线程构建场景下Powermockito无法在不同类中Mock同一个静态方法&quot;</div><div class="line">date:   2015-10-14 13:50:39</div><div class="line">comments: true</div><div class="line">categories: 软件技术</div><div class="line">tags: [Java, 单元测试]</div><div class="line">---</div></pre></td></tr></table></figure>
<p>写好描述后，就可以开始愉快的写正文啦，当你洋洋洒洒的写完你的大作后，你可以使用下面的命令将你的文章提交到 Github 上，完成之后过几分钟应该就能看到新的文章已经在你的个人博客主页上了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">'xxxxx'</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，使用 GitHub Pages + Jekyll 搭建简单的静态博客是非常容易上手的，只要有一点编程基础应该都能搞得定，而且不用像自己搭建 VPS 那样要时不时去维护主机，当然了，Jekyll 也并非完美，下篇文章我将分享我用 Jekyll 时踩到的一些坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早很早以前我就开始玩博客，陆陆续续注册了很多平台，比如博客中国、cnblogs、javeeye（现在叫iteye）、csdn，也零零散散写了一些文章，不过没有坚持多久，工作忙起来后就不再更新，自我回顾一下好像还真没有什么干货，只算是给互联网里堆了一串01010101的数据罢了。那为什么最近又动了写 Blogs 的心思，原因是最近读了一本书，书名是：&lt;a href=&quot;http://product.china-pub.com/4971248&quot;&gt;《软技能：代码之外的生存指南》&lt;/a&gt;，里面&lt;em&gt;第二篇：自我营销&lt;/em&gt;中讲到程序员自我营销的重要性，其中一点就提到了写 Blogs。总结来说，程序员写写 Blogs 不仅是自我营销的一种方式，还是一种很好的学习方式，不是说知识能说出来才算学到了么。&lt;/p&gt;
    
    </summary>
    
      <category term="随便乱写" scheme="http://allenn.cn/categories/%E9%9A%8F%E4%BE%BF%E4%B9%B1%E5%86%99/"/>
    
    
      <category term="Blogs" scheme="http://allenn.cn/tags/Blogs/"/>
    
      <category term="Jekyll" scheme="http://allenn.cn/tags/Jekyll/"/>
    
      <category term="软件工程师的自我宣传" scheme="http://allenn.cn/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E5%AE%A3%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Github的正确使用方法</title>
    <link href="http://allenn.cn/articles/2016-08/2016-08-24-how-to-use-github/"/>
    <id>http://allenn.cn/articles/2016-08/2016-08-24-how-to-use-github/</id>
    <published>2016-08-24T08:21:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了Git的基本用法后（如果你还未了解 Git 的基本使用方法，建议你先话点时间阅读下《 Pro Git 》这本书），相信你已经开始跃跃欲试了，那么我就说下如何正确的使用 Github。下面的图描述了使用 Github 的基本流程：</p>
<p><img src="/assets/images/github-flow/github-flow.png" alt="Github Flow"></p>
<a id="more"></a>
<h3 id="第一步：Fork项目"><a href="#第一步：Fork项目" class="headerlink" title="第一步：Fork项目"></a>第一步：Fork项目</h3><p>Fork 项目其实就是在 Github 上拷贝一份他人项目的副本作为自己的项目。当你进入一个项目页面后，会在右上方看见一个<em>Fork</em>的按钮，点击它就可以 Fork 一个项目。</p>
<p><img src="/assets/images/github-flow/fork-project.jpg" alt="Fork Project"></p>
<p>需要注意的是Fork项目后，你自己的项目并不会和源项目保持自动同步，所以你需要手动进行更新，如何更新请看：<em>第五步：拉取源项目的更新</em>。</p>
<h3 id="第二步：Clone-到本地"><a href="#第二步：Clone-到本地" class="headerlink" title="第二步：Clone 到本地"></a>第二步：Clone 到本地</h3><p>Fork 项目后，我们就可以把代码 Clone 到本地以便我们修改。Github 提供两种 Clone 项目的方式，SSH/HTTPS。如果选用SSH模式，你需要先在本地生成一对SSH Key并上传到Github用于身份识别，具体请参考 Github 的帮助文档：<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">Generating an SSH key</a>。如果选用HTTPS模式，在更新和提交时就要输入 Github 的用户名和密码。一般来说使用 SSH 模式，在一次配置后，就可以免输密码提交代码，比较方便，但使用 HTTPS 模式更具备通用性，所以各有利弊，随意选择~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 使用 ssh clone 项目到本地</div><div class="line">$ git clone git@github.com:rvm/rvm.git</div><div class="line"></div><div class="line"># 使用 https clone 项目到本地</div><div class="line">$ git clone https://github.com/rvm/rvm.git</div></pre></td></tr></table></figure>
<h3 id="第三步：创建分支"><a href="#第三步：创建分支" class="headerlink" title="第三步：创建分支"></a>第三步：创建分支</h3><p>每次开发新功能，都应该新建一个单独的分支（这方面可以参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">《Git分支管理策略》</a>）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 获取主干最新代码</div><div class="line">$ git checkout master</div><div class="line">$ git pull</div><div class="line"></div><div class="line"># 新建一个开发分支myfeature</div><div class="line">$ git checkout -b myfeature</div></pre></td></tr></table></figure>
<h3 id="第四步：Commit-新代码"><a href="#第四步：Commit-新代码" class="headerlink" title="第四步：Commit 新代码"></a>第四步：Commit 新代码</h3><p>分支修改后，就可以提交commit了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git add --all</div><div class="line">$ git status</div><div class="line">$ git commit --verbose</div></pre></td></tr></table></figure>
<ul>
<li>git add 命令的all参数，表示保存所有变化（包括新建、修改和删除）。从Git 2.0开始，all是 git add 的默认参数，所以也可以用 git add . 代替。</li>
<li>git status 命令，用来查看发生变动的文件。</li>
<li>git commit 命令的verbose参数，会列出 diff 的结果。</li>
</ul>
<p>需要注意的是 Commit 代码必须给出简明扼要的提交信息，下面是一个范本，第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、以及需要注意的问题。最后，提供对应的网址（比如Bug ticket）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Present-tense summary under 50 characters</div><div class="line"></div><div class="line">* More information about commit (under 72 characters).</div><div class="line">* More information about commit (under 72 characters).</div><div class="line"></div><div class="line">http://project.management-system.com/ticket/123</div></pre></td></tr></table></figure>
<h3 id="第五步：拉取源项目的更新"><a href="#第五步：拉取源项目的更新" class="headerlink" title="第五步：拉取源项目的更新"></a>第五步：拉取源项目的更新</h3><p>当我们在修改代码的时候，源项目肯定也会发生变化，所以在我们向源项目推送代码之前，需要先将源项目的代码更新拉取下来。</p>
<p>先查看我们的 Remote 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</div><div class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</div></pre></td></tr></table></figure>
<p>将源项目添加为 upstream</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</div></pre></td></tr></table></figure>
<p>检查配置是否生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</div><div class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</div><div class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</div><div class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</div></pre></td></tr></table></figure>
<p>拉取源项目的变更</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git fetch upstream</div><div class="line">remote: Counting objects: 75, done.</div><div class="line">remote: Compressing objects: 100% (53/53), done.</div><div class="line">remote: Total 62 (delta 27), reused 44 (delta 9)</div><div class="line">Unpacking objects: 100% (62/62), done.</div><div class="line">From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</div><div class="line"> * [new branch]      master     -&gt; upstream/master</div></pre></td></tr></table></figure>
<p>切换到 master 分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git checkout master</div></pre></td></tr></table></figure>
<p>将源项目的修改合并到本地 master 分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git merge upstream/master</div></pre></td></tr></table></figure>
<h3 id="第六步：Rebase-本地分支并解决冲突"><a href="#第六步：Rebase-本地分支并解决冲突" class="headerlink" title="第六步：Rebase 本地分支并解决冲突"></a>第六步：Rebase 本地分支并解决冲突</h3><p>接着我们切换到之前的开发分支 myfeature，并同 master 分支进行同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git checkout myfeature</div><div class="line">$ git rebase master</div></pre></td></tr></table></figure>
<p>有时我们会和主干发生冲突，那么我们需要在本地把所有冲突解决掉后才能继续合入代码。如何解决冲突，请阅：<a href="https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/" target="_blank" rel="external">Resolving a merge conflict from the command line</a></p>
<h3 id="第七步：Push到Github"><a href="#第七步：Push到Github" class="headerlink" title="第七步：Push到Github"></a>第七步：Push到Github</h3><p>同步好本地分支后，我们就可以将代码推送到Github了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin myfeature</div></pre></td></tr></table></figure>
<h3 id="第八步：发送Pull-Request"><a href="#第八步：发送Pull-Request" class="headerlink" title="第八步：发送Pull Request"></a>第八步：发送Pull Request</h3><p>点击项目页面上方的pull request按钮</p>
<p><img src="/assets/images/github-flow/create-pull-request-1.jpg" alt="pull request button"></p>
<p>我们自己的项目选择之前的开发分支，源项目选择 master 分支</p>
<p><img src="/assets/images/github-flow/create-pull-request-2.png" alt="pull request"></p>
<p>在下面的页面上填写上描述，然后点击发送即可，接着下来就是原作者的事儿了，如果他同意合入我们会在项目的 master 分支看到我们刚刚贡献的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了Git的基本用法后（如果你还未了解 Git 的基本使用方法，建议你先话点时间阅读下《 Pro Git 》这本书），相信你已经开始跃跃欲试了，那么我就说下如何正确的使用 Github。下面的图描述了使用 Github 的基本流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/github-flow/github-flow.png&quot; alt=&quot;Github Flow&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://allenn.cn/tags/Git/"/>
    
      <category term="Github" scheme="http://allenn.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>在公司内网如何更新IntelliJ的插件</title>
    <link href="http://allenn.cn/articles/2016-08/2016-08-19-resolve-java-app-ssl-error/"/>
    <id>http://allenn.cn/articles/2016-08/2016-08-19-resolve-java-app-ssl-error/</id>
    <published>2016-08-19T14:21:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>最近小伙伴们更新IntelliJ后，发现没法安装或者更新插件了，每次尝试在线安装时总会提示SSL错误。特别是要玩Scala的小伙伴更是抓狂，因为本身IntelliJ并不自带Scala的支持，需要下载Scala插件。不得以，只能通过手动下载，但是这样就不能享受插件更新的新功能了，很是不爽。那么报SSL错误的原因是什么呢？其实是因为IntelliJ更新插件时使用了Https连接，在连接时，客户端和服务器是要相互校验证书的，一般来说，只要证书正确，客户端是可以和服务器正常交互的。但是，我们是在公司内网，用的是公司的Proxy连接外网。公司的代理服务器会将证书换成公司自己颁(wei)发(zao)的证书（满满的<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="external">中间人攻击</a>的即视感，公司这样做是要干嘛？你懂的。。。），这时IntelliJ就无法同插件服务器正常通信了，那么怎么解决这个问题呢？那就是导入公司代理服务器的根证书，把公司颁(wei)发(zao)的证书变成可信任的证书。</p>
<a id="more"></a>
<p>OK, Let’s do it! 首先导出公司代理服务器的根证书，用浏览器即可，随便访问应该https的外网网站，点击地址栏上的小锁头。</p>
<p><img src="/assets/images/java-ssl-error/ie_url_bar-certificate-error.png" alt="ie_url_bar"></p>
<p>打开的窗口中,点击下一步即可,</p>
<p><img src="/assets/images/java-ssl-error/export_cert_1.png" alt="证书详细信息"></p>
<p>在正式编码格式中,选择指定的格式,点击下一步;</p>
<p><img src="/assets/images/java-ssl-error/export_cert_2.png" alt="证书导出向导"></p>
<p>指定生成证书文件的名称(此处为vbooking.cer)</p>
<p><img src="/assets/images/java-ssl-error/export_cert_3.png" alt="vbooking.cer"></p>
<p>接着，将证书导入java的cacerts证书库，切换到目录 ${JAVA_HOME}/jre/lib/security, 执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">keytool -import -alias vbooking -keystore cacerts -file $&#123;cert_file_path&#125;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>-alias 指定别名(推荐和证书同名)</li>
<li>-keystore 指定存储文件(此处固定)</li>
<li>-file 指定证书文件全路径(证书文件所在的目录)</li>
</ul>
<p>此时命令行会提示你输入cacerts证书库的密码,敲入changeit即可,这是java中cacerts证书库的默认密码,当然也可自行修改。</p>
<p>最后，在系统中新建一个环境变量，IDEA_JDK（64位程序为IDEA_JDK_64），指向刚才导入根证书的JDK，不然IntelliJ会使用内置的JDK（详细见<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544879-Selecting-the-JDK-version-the-IDE-will-run-under" target="_blank" rel="external">这里</a>），重启IntelliJ后即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近小伙伴们更新IntelliJ后，发现没法安装或者更新插件了，每次尝试在线安装时总会提示SSL错误。特别是要玩Scala的小伙伴更是抓狂，因为本身IntelliJ并不自带Scala的支持，需要下载Scala插件。不得以，只能通过手动下载，但是这样就不能享受插件更新的新功能了，很是不爽。那么报SSL错误的原因是什么呢？其实是因为IntelliJ更新插件时使用了Https连接，在连接时，客户端和服务器是要相互校验证书的，一般来说，只要证书正确，客户端是可以和服务器正常交互的。但是，我们是在公司内网，用的是公司的Proxy连接外网。公司的代理服务器会将证书换成公司自己颁(wei)发(zao)的证书（满满的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB&quot;&gt;中间人攻击&lt;/a&gt;的即视感，公司这样做是要干嘛？你懂的。。。），这时IntelliJ就无法同插件服务器正常通信了，那么怎么解决这个问题呢？那就是导入公司代理服务器的根证书，把公司颁(wei)发(zao)的证书变成可信任的证书。&lt;/p&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="IntelliJ" scheme="http://allenn.cn/tags/IntelliJ/"/>
    
      <category term="ssl" scheme="http://allenn.cn/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>Java核心API需要掌握的程度</title>
    <link href="http://allenn.cn/articles/2016-08/2016-08-14-java-api-need-to-know/"/>
    <id>http://allenn.cn/articles/2016-08/2016-08-14-java-api-need-to-know/</id>
    <published>2016-08-14T15:21:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>最近总结，发现自己没啥提升，准备开始练级，记下这个，给自己一个目标。Java的核心API是非常庞大的,这给开发者来说带来了很大的方便，经常人有评论,java让程序员变傻。但是一些内容我认为是必须掌握的，否则不可以熟练运用java，也不会使用就很难办了。</p>
<ol>
<li>java.lang包下的80％以上的类的功能的灵活运用。</li>
<li>java.util包下的80％以上的类的灵活运用，特别是集合类体系、正规表达式、时间、属性、和Timer.</li>
<li>java.io包下的60％以上的类的使用，理解IO体系的基于管道模型的设计思路以及常用IO类的特性和使用场合。</li>
<li>java.math包下的100％的内容。</li>
<li>java.net包下的60％以上的内容，对各个类的功能比较熟悉。</li>
<li>java.text包下的60％以上的内容，特别是各种格式化类。</li>
<li>熟练运用JDBC.</li>
<li>java.security包下40％以上的内容，如果对于安全没有接触的话根本就不可能掌握java.</li>
<li>AWT的基本内容，包括各种组件事件、监听器、布局管理器、常用组件、打印。</li>
<li>Swing的基本内容，和AWT的要求类似。</li>
<li>XML处理，熟悉SAX、DOM以及JDOM的优缺点并且能够使用其中的一种完成XML的解析及内容处理。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近总结，发现自己没啥提升，准备开始练级，记下这个，给自己一个目标。Java的核心API是非常庞大的,这给开发者来说带来了很大的方便，经常人有评论,java让程序员变傻。但是一些内容我认为是必须掌握的，否则不可以熟练运用java，也不会使用就很难办了。&lt;/p&gt;
&lt;ol&gt;
&lt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="api" scheme="http://allenn.cn/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>25分钟改变你的工作效率：番茄工作法</title>
    <link href="http://allenn.cn/articles/2016-08/2016-08-12-intro-pomodoro-technique/"/>
    <id>http://allenn.cn/articles/2016-08/2016-08-12-intro-pomodoro-technique/</id>
    <published>2016-08-12T08:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>少年，你是不是每5分钟就会拿起一次手机？你是不是每天忙忙碌碌但最后好像什么也没干？你是不是日复一日的加班感觉身体被掏空？</p>
<p><img src="/assets/images/intro-pomodoro-technique/time-lack.png" alt="我真的很缺时间"></p>
<p>那么，你想变得更专注么？你想变得更有效率么？你想每天下班按时回家么？那么来试试这个番茄工作法吧！</p>
<a id="more"></a>
<p>番茄工作法？也许很多人对它还比较陌生，包括我，我也是在阅读了《软技能－代码之外的生存指南》（这是一本好书，推荐所有人阅读）后才了解到它。那么什么是番茄工作法呢？</p>
<blockquote>
<p>番茄工作法（英语：Pomodoro Technique）是一种时间管理法方法，在上世纪八十年代由Francesco Cirillo创立。该方法使用一个定时器来分割出一个一般为25分钟的工作时间和5分钟的休息时间，而那些时间段被称为pomodori，为意大利语单词 pomodoro（中文：番茄）之复数。以上来自<a href="https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95" target="_blank" rel="external">维基百科：番茄工作法</a></p>
</blockquote>
<p>简单来说就是把工作时间划分为一小节一小节的，每小节30分钟，其中包含了25分钟的工作时间和5分钟的休息时间。是不是很简单？</p>
<p>OK，那让我们来实践一下，请选择一件你觉得在25分钟内能完成的工作，在这25分钟的工作时间中，请把Email关掉，手机调整成静音，打好茶水。然后把手机的定时器打开，设置25分钟的倒计时，然后开始工作。</p>
<p><img src="/assets/images/intro-pomodoro-technique/25mins-get-it-done.png" alt="打开你的定时器"></p>
<p>OK,Time up，现在感觉怎么样？是不是找回了专注的感觉？<em>一次只专注做好一件事情</em>，这就是番茄工作法的精髓所在。我们都知道工作情境的切换特别耗费人的精力，你也许会有过这样的体验，当你在酝酿某种思路时，突然一个电话，你之前在大脑里构建的宏伟建筑顷刻就能灰飞烟灭。你只有一双脚，不能同时跳两场舞。</p>
<p><img src="/assets/images/intro-pomodoro-technique/two-dance.gif" alt="打开你的定时器"></p>
<h2 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h2><p>「番茄工作法」的使用主流程如下：</p>
<ol>
<li>每天早上到公司后，首先拿一张纸（或者是本子中的一页），用笔写下当天应该要做完的事情。</li>
<li>将这些事情按优先级排序，然后进行大致的估算后，拆分成若干个「番茄钟」，每个「番茄钟」是 25 分钟。</li>
<li>设置「番茄钟」倒计时，同时开始第一件事情的第一个「番茄钟」。</li>
<li>在「番茄钟」倒计时期间，集中精力只做事先安排好的事情。</li>
<li>在「番茄钟」结束后，休息 5 分钟，走动放松一下，然后继续下一个「番茄钟」，直到完成自己的任务。</li>
<li>每完成 4 个「番茄钟」（即 2 小时），休息 15-30 分钟。</li>
<li>每天回顾「番茄钟」完成的情况，回顾一下自己被打断的原因，看看哪些打断可以避免。</li>
</ol>
<p>在实际工作中你总会遇到一些疑问情况，因为你不是与世隔绝的，你是在一个团队中工作。番茄工作法也没有要求你做到与世隔绝，完全“两耳不闻窗外事”。那么如何处理这种“突发状况”呢：</p>
<ol>
<li>如果你被电话、交谈打断，这个「番茄钟」即宣告失败，可以简单休息 5 分钟，然后重启「番茄钟」。</li>
<li>如果你突然想到一件重要的事情，除非当前非做不可，否则应该在纸上将此事快速记录下来，然后继续你的「番茄钟」。</li>
</ol>
<p>下面用一张图来说明整个番茄工作法的流程，这张图来自<a href="https://www.amazon.cn/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3-%E7%AE%80%E5%8D%95%E6%98%93%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95-%E8%AF%BA%E7%89%B9%E4%BC%AF%E6%A0%BC/dp/B004O9F71K" target="_blank" rel="external">《番茄工作法图解-简单易行的时间管理方法》</a>：</p>
<p><img src="/assets/images/intro-pomodoro-technique/overview.png" alt="工作流程"></p>
<h2 id="技巧和心得"><a href="#技巧和心得" class="headerlink" title="技巧和心得"></a>技巧和心得</h2><p>OK，上面说了那么多，相信你对番茄工作法已经有一定的了解了，那为什么我要推荐给你，因为我用了以后觉得好，就像成龙大哥说的那样：我用完之后是这样子，你们用完之后，也是这样子！</p>
<p><img src="/assets/images/intro-pomodoro-technique/duang.png" alt="duang"></p>
<ol>
<li>在进行「番茄钟」时，我们应该尽量想办法避开一些容易分神的信息源。例如：将手机的消息推送静音，关闭 QQ 和微信。相信我，你大多数时候并不需要立即响应聊天软件中的信息。使用「番茄钟」后，你的消息回复时间最坏情况下也就是晚 25 分钟。如果真的有人有急事，他会直接到你的办公桌来找你，或者直接给你打电话的。</li>
<li>刚开始的时候我建议你把「番茄钟」设定在25分钟，随着你的注意力控制越来越容易，你可以适当延长「番茄钟」的时间。就我的经验，延长到 45 - 50 分钟是完全没有问题的。其实你如果明白了「番茄钟」的原理，你甚至可以在心中假想一个「番茄钟」，然后让自己快速进入精力集中状态。</li>
<li>一天下来，回顾自己当天的「番茄钟」完成情况，看看主要的问题在于自己的精力无法集中，还是老是被别人打断。针对具体的问题可以做一些调整的尝试。比如，如果是精力无法集中，则看看是否是干扰源过多，尽量减少干扰。如果是老被打断，则可以和同事商量一些工作方式，比如让同事尽量用邮件和 QQ 找你，而不是当面打扰你。</li>
<li>我使用了一个内置番茄计时器的看板程序来追踪我每天的工作情况，<a href="https://kanbanflow.com" target="_blank" rel="external">Kanbanflow</a>，我每天会在开完早会后花一个番茄钟的时间来安排我一天的任务，并用它来作为我的「番茄钟」计时器。它还能输出一个报告，告诉你每天完成了多少个「番茄钟」，被打断了多少次，被打断的原因又是什么。我觉得不错，你可以去试试。</li>
</ol>
<p><img src="/assets/images/intro-pomodoro-technique/KanbanFlowBoard.png" alt="KanbanFlowBoard"></p>
<p>最后我想说的是，我们应该认识到，工作被打断是在所难免的，总会有一些临时的沟通工作无法被计划，并且是有价值的。所以，「番茄钟」失败后，不应该有过多的情绪，尽快重启一个「番茄钟」，你的工作应该很快就会进入状态。Try it，相信你也会有很大的收获。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;少年，你是不是每5分钟就会拿起一次手机？你是不是每天忙忙碌碌但最后好像什么也没干？你是不是日复一日的加班感觉身体被掏空？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/intro-pomodoro-technique/time-lack.png&quot; alt=&quot;我真的很缺时间&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么，你想变得更专注么？你想变得更有效率么？你想每天下班按时回家么？那么来试试这个番茄工作法吧！&lt;/p&gt;
    
    </summary>
    
      <category term="工作方法" scheme="http://allenn.cn/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>CompletionService小技巧</title>
    <link href="http://allenn.cn/articles/2016-08/2016-08-10-java-CompletionService-tips/"/>
    <id>http://allenn.cn/articles/2016-08/2016-08-10-java-CompletionService-tips/</id>
    <published>2016-08-10T08:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇blogs中，我详细的解释了<code>CompletionService</code>的使用方法和<code>ExecutorCompletionService</code>的详细实现，这篇blogs中，我就介绍使用它的一个小技巧，算是对上一篇blogs的一个补完。在开始之前我们先回顾一下它的实现。</p>
<a id="more"></a>
<p>首先，在初始化<code>ExecutorCompletionService</code>的时候我们需要传入一个<code>Executor</code>，作为<code>ExecutorCompletionService</code>执行任务的容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExecutorCompletionService</span><span class="params">(Executor executor)</span> </span>&#123;</div><div class="line">    [......]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExecutorCompletionService</span><span class="params">(Executor executor,</span></span></div><div class="line">                                 BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue) &#123;</div><div class="line">    [......]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，调用<code>submit</code>方法，向它提交任务。<code>submit</code>方法会将我们提交的任务包装成一个<code>QueueingFuture</code>并提交给<code>Executor</code>来执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Future&lt;V&gt; <span class="title">submit</span><span class="params">(Callable&lt;V&gt; task)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </div><div class="line">    RunnableFuture&lt;V&gt; f = newTaskFor(task);  </div><div class="line">    executor.execute(<span class="keyword">new</span> QueueingFuture(f));  </div><div class="line">    <span class="keyword">return</span> f;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着，<code>QueueingFuture</code>会在任务执行完成后把执行结果放到队列中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueingFuture</span> <span class="keyword">extends</span> <span class="title">FutureTask</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</div><div class="line">    QueueingFuture(RunnableFuture&lt;V&gt; task) &#123;</div><div class="line">        <span class="keyword">super</span>(task, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.task = task;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123; completionQueue.add(task); &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Future&lt;V&gt; task;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们通过<code>take</code>或者<code>poll</code>方法就能拿到任务执行的结果。</p>
<p>下面让我们设想一个场景，我需要从网络上下载几张图片和视频并最后把它们渲染到页面上去，由于下载图片和视频都比较耗时，所以我希望能以多线程的形式进行下载。但是由于资源有限，下载的并发度不能太大，所以需要限制线程池的并发线程大小。但如果将可用线程数平均分给下载图片和下载视频的线程池，当某线程池的所有任务执行完成后，另外一个线程池也无法获取到它所释放的资源。那怎么办呢？我们可以创建一个统一的线程池，然后把两个CompletionService绑定上去，让CompletionService作为一个句柄来使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">final</span> ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="keyword">final</span> ExecutorCompletionService&lt;Image&gt; imageCompletionService = <span class="keyword">new</span> ExecutorCompletionService&lt;&gt;(pool);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">final</span> String site : imageSites) &#123;</div><div class="line">    completionService.submit(<span class="keyword">new</span> Callable&lt;Image&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> IOUtils.toString(<span class="keyword">new</span> URL(<span class="string">"http://"</span> + site), StandardCharsets.UTF_8);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> ExecutorCompletionService&lt;Video&gt; vidoeCompletionService = <span class="keyword">new</span> ExecutorCompletionService&lt;&gt;(pool);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">final</span> String site : videoSites) &#123;</div><div class="line">    completionService.submit(<span class="keyword">new</span> Callable&lt;Video&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> IOUtils.toString(<span class="keyword">new</span> URL(<span class="string">"http://"</span> + site), StandardCharsets.UTF_8);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">List&lt;Image&gt; images = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topSites.size(); ++i) &#123;</div><div class="line">    <span class="keyword">final</span> Future&lt;String&gt; future = completionService.take();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        images.add(future.get());</div><div class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">        log.warn(<span class="string">"Error while downloading"</span>, e.getCause());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">List&lt;Video&gt; videos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topSites.size(); ++i) &#123;</div><div class="line">    <span class="keyword">final</span> Future&lt;String&gt; future = completionService.take();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        videos.add(future.get());</div><div class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">        log.warn(<span class="string">"Error while downloading"</span>, e.getCause());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ... do process content</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇blogs中，我详细的解释了&lt;code&gt;CompletionService&lt;/code&gt;的使用方法和&lt;code&gt;ExecutorCompletionService&lt;/code&gt;的详细实现，这篇blogs中，我就介绍使用它的一个小技巧，算是对上一篇blogs的一个补完。在开始之前我们先回顾一下它的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="多线程" scheme="http://allenn.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何在单元测试中设置系统环境变量</title>
    <link href="http://allenn.cn/articles/2015-10/how-to-set-property-in-unit-test/"/>
    <id>http://allenn.cn/articles/2015-10/how-to-set-property-in-unit-test/</id>
    <published>2015-10-17T05:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们需要通过读取系统环境变量来获取一些有用的信息，比如系统路径、临时目录等。在系统真正运行的时候我们可以通过启动命令行，如：java -Dxxx.xxx=xxxx …，或者使用System.setProperty(“xxx.xxx”, “xxx.xxx”)来设置系统环境变量。但在单元测试时如何设置这些系统环境变量又成了一个让人头疼的问题。有些小伙伴是在setUp方法里设置，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> LicenseException</span></div><div class="line">&#123;</div><div class="line">    PowerMockito.mockStatic(XXXSystem.class);</div><div class="line">    System.setProperty(<span class="string">"xxx.xxx"</span>, <span class="string">"xxx.xxx"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是我们很快就会发现，这种设置方法在只有一个测试用例的时候是OK的，当你的测试类里有多个@Test标签时，就会发生一些很奇怪的问题。比如某些用例读到了环境变量，有些却没有读取到。主要的原因是System.setProperty(“xxx.xxx”, “xxx.xxx”);方法是会作用在整个JVM上的，而多个测试用例是会在同一个JVM上面运行的，而JUnit的@Before标签标示的方法又会在每个测试用例启动前运行，这样就会导致环境变量相互覆盖。特别是开启并发执行单元测试功能时，这种现象更加严重。那么如何设置环境变量才是安全的呢？首先，我们要抛弃在setUp方法里设置环境变量的做法，然后在POM文件中做如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 单元测试时，系统参数iemp.home的路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test.home</span>&gt;</span>$&#123;project.build.directory&#125;/opt/server<span class="tag">&lt;/<span class="name">test.home</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        ....</div><div class="line">        <span class="tag">&lt;<span class="name">systemPropertyVariables</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">home</span>&gt;</span>$&#123;test.home&#125;<span class="tag">&lt;/<span class="name">home</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">systemPropertyVariables</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样我们就可以很轻松的在单元测试中读取系统环境变量了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时我们需要通过读取系统环境变量来获取一些有用的信息，比如系统路径、临时目录等。在系统真正运行的时候我们可以通过启动命令行，如：java -Dxxx.xxx=xxxx …，或者使用System.setProperty(“xxx.xxx”, “xxx.xxx”)来设置系统环境变量。但在单元测试时如何设置这些系统环境变量又成了一个让人头疼的问题。有些小伙伴是在setUp方法里设置，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Before&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; LicenseException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PowerMockito.mockStatic(XXXSystem.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;xxx.xxx&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;xxx.xxx&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="单元测试" scheme="http://allenn.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Mock 与 Stub</title>
    <link href="http://allenn.cn/articles/2015-10/2015-10-14-unit-test-mock/"/>
    <id>http://allenn.cn/articles/2015-10/2015-10-14-unit-test-mock/</id>
    <published>2015-10-14T08:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在进行单元测试的时候，我们会发现我们要测试的方法会有很多外部依赖，比如：发邮件，进行网络通讯，操作文件系统等等。而我们通常关注的是被测试对象的功能和行为，对于它的依赖，我们仅仅需要关注它们之间的交互，但对依赖的对象是如何执行的具体细节我们并不关注。较为常见的技巧就是使用mock对象或者stub对象来代替真实的依赖。</p>
</blockquote>
<h2 id="Mocks-aren’t-stubs"><a href="#Mocks-aren’t-stubs" class="headerlink" title="Mocks aren’t stubs"></a>Mocks aren’t stubs</h2><p>这是软件大师<a href="http://martinfowler.com/" target="_blank" rel="external">Martin Fowler</a>的一篇经典博文。Martin大师在文章中详细的解释了Mock与Stub的区别，以及怎样使用它们进行TDD实践等等一系列干货，强烈推荐阅读，猛击<a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">这里</a>阅读原文。我无意把大师的话再复述一遍，所以在本文中我就聊聊我对Mock与Stub的理解以及一些实践。</p>
<a id="more"></a>
<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>先看看两者的相同点吧，非常明确的是，Mock和Stub都可以用来对系统(或者将粒度放小为模块，单元)进行隔离。先看看两者的相同点吧，非常明确的是，Mock和Stub都可以用来对系统(或者将粒度放小为模块，单元)进行隔离。</p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>Mock和Stub有两个主要区别：</p>
<ol>
<li>校验测试结果的方式不同，Mock倾向于校验行为（Beahavior verification），Stub倾向于校验状态；</li>
<li>Mock和Stub也代表了两种将测试与设计结合在一起的理念。</li>
</ol>
<p>上面的说法比较抽象，让我们通过例子来看看Mock与Stub的区别。</p>
<h2 id="使用Stub进行单元测试"><a href="#使用Stub进行单元测试" class="headerlink" title="使用Stub进行单元测试"></a>使用Stub进行单元测试</h2><p>下面是一个使用Stub进行单元测试的例子，我们打算创建一个订单对象，并用仓库中的货物填充这个订单。这个订单对象很简单，只有产品和数量两种信息，仓库保存着不同产品的目录。当我们需要填充订单的时候，会有两种不同的回应，如果仓库中有足够的货物，那么订单就会被填满，并且仓库相应产品的数量就会降低到对应的数量。如果仓库中没有足够的参评，那么订单就不会被填充，并且仓库中产品的数量没有任何的变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStateTester</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TALISKER = <span class="string">"Talisker"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String HIGHLAND_PARK = <span class="string">"Highland Park"</span>;</div><div class="line">    <span class="keyword">private</span> WareHouse warehouse = <span class="keyword">new</span> WareHouseImpl();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        warehouse.add(TALISKER , <span class="number">50</span>);</div><div class="line">        warehouse.add(HIGHLAND_PARK , <span class="number">25</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderIsFilledIfEnoughInWarehouse</span><span class="params">()</span></span>&#123;</div><div class="line">        Order order = <span class="keyword">new</span> Order(TALISKER , <span class="number">50</span>);</div><div class="line">        order.fill(warehouse);</div><div class="line">        assertTrue(order.isFilled());</div><div class="line">        assertEquals(<span class="number">0</span> , warehouse.getInventory(TALISKER));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderDoseNotRemoveIfNotEnough</span><span class="params">()</span> </span>&#123;</div><div class="line">        Order order = <span class="keyword">new</span> Order(TALISKER , <span class="number">51</span>);</div><div class="line">        order.fill(warehouse);</div><div class="line">        assertFalse(order.isFilled());</div><div class="line">        assertEquals(<span class="number">50</span> , warehouse.getInventory(TALISKER));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子里，我们需要对Order对象进行测试，为了验证Order.fill方法，我们还需要WareHouse对象。但真正的WareHouse对象内部可能有很复杂的实现，比如读取文件，访问数据库，持有同步锁以维持对象在并发访问时内部数据正确等。实际上在单元测试时我们并不需要去和这些代码发生交互，而且这些复杂的代码还会让我们的单元测试很不稳定。数据库连接失败、必须的配置文件读取失败等都会导致我们的单元测试失败。显然我们并不希望这些外部的因素影响我们的单元测试</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在进行单元测试的时候，我们会发现我们要测试的方法会有很多外部依赖，比如：发邮件，进行网络通讯，操作文件系统等等。而我们通常关注的是被测试对象的功能和行为，对于它的依赖，我们仅仅需要关注它们之间的交互，但对依赖的对象是如何执行的具体细节我们并不关注。较为常见的技巧就是使用mock对象或者stub对象来代替真实的依赖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Mocks-aren’t-stubs&quot;&gt;&lt;a href=&quot;#Mocks-aren’t-stubs&quot; class=&quot;headerlink&quot; title=&quot;Mocks aren’t stubs&quot;&gt;&lt;/a&gt;Mocks aren’t stubs&lt;/h2&gt;&lt;p&gt;这是软件大师&lt;a href=&quot;http://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt;的一篇经典博文。Martin大师在文章中详细的解释了Mock与Stub的区别，以及怎样使用它们进行TDD实践等等一系列干货，强烈推荐阅读，猛击&lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;这里&lt;/a&gt;阅读原文。我无意把大师的话再复述一遍，所以在本文中我就聊聊我对Mock与Stub的理解以及一些实践。&lt;/p&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="单元测试" scheme="http://allenn.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>在多线程构建场景下Powermockito无法在不同类中Mock同一个静态方法</title>
    <link href="http://allenn.cn/articles/2015-10/2015-10-14-powermockito-would-not-work-on-multi-thread/"/>
    <id>http://allenn.cn/articles/2015-10/2015-10-14-powermockito-would-not-work-on-multi-thread/</id>
    <published>2015-10-14T05:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>在修改单元测试的过程中，不幸踩了个坑，发现 Powermockito 的PowerMock.mockStatic(ClassThatContainsStaticMethod.class) 在多线程场景下是无法正常工作的，这再次验证了之前 ThrougthWorks 顾问说的那句话：</p>
<blockquote>
<p>除非万不得已，或者是Mock遗留系统接口，否则不要使用Powermockito。</p>
</blockquote>
<a id="more"></a>
<p>发生问题的场景是这样的 Class C 有一个静态方法，Class A 和 Class B 都需要调用这个方法完成一些功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class C&#123;</div><div class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SomeObject <span class="title">getSomeObject</span><span class="params">()</span></span>&#123;</div><div class="line">truetrue[....]</div><div class="line">true&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class A &#123;</div><div class="line">true<span class="keyword">private</span> SomeObject someObject = C.getSomeObject();</div><div class="line"></div><div class="line">true[.....]</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class B &#123;</div><div class="line">true<span class="keyword">private</span> SomeObject someObject = C.getSomeObject();</div><div class="line"></div><div class="line">true[.....]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于在测试中直接调用 C.getSomeObject() 会导致一些不可预期的错误，所以我想对AB类进行测试就必须使用Mock，于是我那么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class ATest&#123;</div><div class="line">true<span class="meta">@Before</span></div><div class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</div><div class="line">truetruePowerMock.mockStatic(C.class)</div><div class="line">truetruePowerMock.when(C.C.getSomeObject()).thenReturn(PowerMock.mock(SomeObject.class))</div><div class="line">true&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Class BTest&#123;</div><div class="line">true<span class="meta">@Before</span></div><div class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</div><div class="line">truetruePowerMock.mockStatic(C.class)</div><div class="line">truetruePowerMock.when(C.C.getSomeObject()).thenReturn(PowerMock.mock(SomeObject.class))</div><div class="line">true&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我在IDE中分别运行 ATest 或者 BTest 是，我的测试都是能正确运行的，但是当你使用Maven或者其他的构建工具进行多线程测试的时候，你就会发现问题来了。一会是A抛异常，一会是B抛异常，总之就是不能很好的工作。由于我不是Powermockito的专家，所以无法深入的去探究这个问题的原因，但是我想，这应该是和静态方法本身在一个JVM内的唯一性有关，我截取了网上两个解释供参考：</p>
<h4 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h4><p>Without going into details let’s look at this code written using with Mockito :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">given(mock.doSomethingWith(eq(<span class="string">"A"</span>), longThat(...)).thenReturn(<span class="string">"C"</span>);</div></pre></td></tr></table></figure>
<p>Which is roughly equivalent to :<br>(<strong>*</strong> NEVER use a reference to OngoingStubbing in real test code, it might &gt;lead to wrong test code <strong>*</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String aString = eq(<span class="string">"A"</span>);</div><div class="line">Long aLong = longThat(...);</div><div class="line">String variableThatGiveReturnType = mock.doSomethingWith(aString, aLong);</div><div class="line">BDDOngoingStubbing&lt;String&gt; ongoingStubbing = given(variableThatGiveReturnType);</div><div class="line">ongoingStubbing.thenReturn(<span class="string">"C"</span>);</div></pre></td></tr></table></figure>
<p>The stubbing is clearly not finished until the last call thenReturn is completed, right.</p>
<p>Don’t you see the missing link between all those line to actually achieve the stubbing in a fluent way ? ;)</p>
<p>Dependening on how you do that, if you don’t synchronize this block you won’t be able to achieve any correct stubbing, otherwise concurrent access anywhere in this block will garble things in the mock internals.</p>
<p>And if you add the fact that the mock might be already used, with it’s own concurrent code to use the answers, you end up in with completely messed up internal states.</p>
<p>Anyway, always stub before using mocks concurrently.</p>
<h4 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h4><p>For healthy scenarios Mockito plays nicely with threads. For instance, you can run tests in parallel to speed up the build. Also, You can let multiple threads call methods on a shared mock to test in concurrent conditions. Check out a [<a href="http://mockito.googlecode.com/svn/tags/latest/javadoc/org/mockito/Mockito.html#22" target="_blank" rel="external">http://mockito.googlecode.com/svn/tags/latest/javadoc/org/mockito/Mockito.html#22</a> timeout()] feature for testing concurrency.</p>
<p>However Mockito is only thread-safe in healthy tests, that is tests without multiple threads stubbing/verifying a shared mock. Stubbing or verification of a shared mock from different threads is NOT the proper way of testing because it will always lead to intermittent behavior. In general mutable state + assertions in multi-threaded environment lead to random results. If you do stub/verify a shared mock across threads you will face occasional exceptions like: WrongTypeOfReturnValue, etc.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在修改单元测试的过程中，不幸踩了个坑，发现 Powermockito 的PowerMock.mockStatic(ClassThatContainsStaticMethod.class) 在多线程场景下是无法正常工作的，这再次验证了之前 ThrougthWorks 顾问说的那句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除非万不得已，或者是Mock遗留系统接口，否则不要使用Powermockito。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="软件技术" scheme="http://allenn.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://allenn.cn/tags/Java/"/>
    
      <category term="单元测试" scheme="http://allenn.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X 安装 JDK备忘</title>
    <link href="http://allenn.cn/articles/2013-09/mac-install-jdk_1_6/"/>
    <id>http://allenn.cn/articles/2013-09/mac-install-jdk_1_6/</id>
    <published>2013-09-30T08:21:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装JDK1-6"><a href="#安装JDK1-6" class="headerlink" title="安装JDK1.6"></a>安装JDK1.6</h3><p>oracle官网从jdk1.7开始才有Mac版的安装包，但有的项目必须使用jdk1.6，所以必须从其他途径安装jdk1.6了。查了下发现，要想安装jdk1.6，可以直接从apple的开发者网站下安装提供的java支持包，具体下载地址 <a href="http://connect.apple.com/" target="_blank" rel="external">http://connect.apple.com/</a></p>
<a id="more"></a>
<p>详细可参见这篇文章<br><a href="http://stackoverflow.com/questions/6614380/jdk-on-osx-10-7-lion" target="_blank" rel="external">http://stackoverflow.com/questions/6614380/jdk-on-osx-10-7-lion</a></p>
<h3 id="包路径等问题"><a href="#包路径等问题" class="headerlink" title="包路径等问题"></a>包路径等问题</h3><p>系统默认安装的JRE路径<code>/System/Library/Frameworks/JavaVM.framework/</code>，oracle和apple等安装的JDK包的路径<code>/Library/Java/JavaVirtualMachines/</code></p>
<h3 id="JAVA-HOME在哪了？"><a href="#JAVA-HOME在哪了？" class="headerlink" title="JAVA_HOME在哪了？"></a>JAVA_HOME在哪了？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/Library/Java/JavaVirtualMachines/1.6.0_38-b04-436.jdk/Contents/Home</div></pre></td></tr></table></figure>
<p>注：1.6.0_38-b04-436.jdk目录名字与安装的jdk版本有关</p>
<h3 id="rt-jar、jsse-jar去哪了？"><a href="#rt-jar、jsse-jar去哪了？" class="headerlink" title="rt.jar、jsse.jar去哪了？"></a>rt.jar、jsse.jar去哪了？</h3><p>rt.jar已经集成到<code>/Library/Java/JavaVirtualMachines/1.6.0_38-b04-436.jdk/Contents/Classes/classes.jar</code>，jsse.jar也在Classes目录下</p>
<p>建议把<code>classes.jar</code>和<code>jsse.jar</code>建立软连接到<code>/Library/Java/JavaVirtualMachines/1.6.0_38-b04-436.jdk/Contents/Home/lib/</code>下，并且<code>classes.jar</code>的软连接命名为<code>rt.jar</code></p>
<p>这样就可以避免一些时候会发生找不到<code>rt.jar</code>的问题了，例如在使用混淆码的时候。</p>
<h3 id="配置JAVA-HOME"><a href="#配置JAVA-HOME" class="headerlink" title="配置JAVA_HOME"></a>配置JAVA_HOME</h3><p>Mac OS X的环境变量文件在<code>/etc/profile</code>，unix一贯重要的文件。<br>在此添加最下端添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0_38-b04-436.jdk/Contents/Home/</div><div class="line">export JAVA_HOME</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装JDK1-6&quot;&gt;&lt;a href=&quot;#安装JDK1-6&quot; class=&quot;headerlink&quot; title=&quot;安装JDK1.6&quot;&gt;&lt;/a&gt;安装JDK1.6&lt;/h3&gt;&lt;p&gt;oracle官网从jdk1.7开始才有Mac版的安装包，但有的项目必须使用jdk1.6，所以必须从其他途径安装jdk1.6了。查了下发现，要想安装jdk1.6，可以直接从apple的开发者网站下安装提供的java支持包，具体下载地址 &lt;a href=&quot;http://connect.apple.com/&quot;&gt;http://connect.apple.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日积月累" scheme="http://allenn.cn/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="JDK" scheme="http://allenn.cn/tags/JDK/"/>
    
      <category term="Macbook" scheme="http://allenn.cn/tags/Macbook/"/>
    
  </entry>
  
  <entry>
    <title>我的毕业综合症</title>
    <link href="http://allenn.cn/articles/2010-06/2010-06-20-graduate/"/>
    <id>http://allenn.cn/articles/2010-06/2010-06-20-graduate/</id>
    <published>2010-06-20T05:50:39.000Z</published>
    <updated>2016-09-24T10:57:54.799Z</updated>
    
    <content type="html"><![CDATA[<p>最近听到的消息有点多，</p>
<p>FOR EXAMPLE,</p>
<p>XX获得 UNIVERSITY XXX 的 OFFER （XXX可以替代 Cambridge，Oxford，OR Stanford etc..）。</p>
<a id="more"></a>
<p>OR</p>
<p>XX的PHD获批，一年XXXXX欧元研究经费，还不用交学费，</p>
<p>OR</p>
<p>XX雅思6+、7+，GRE 1400+……</p>
<p>P.S:暂时没有听见XX被Microsoft, Google, Ericsson, IBM, Oracle录取，不然我彻底崩溃</p>
<p>然后我就开始质疑我的选择是否正确，并纠结着是否给Dan发个邮件问他能不能赏个PHD我读读，最后开始感叹同样是人，怎么差距就那么大。</p>
<p>我开始担心三年后，我的激情是否会被相对死板的中国银行给浇灭，然后成为一个完全没有自我意识软件流水线操作员。</p>
<p>我开始担心三年后，我不在对代码感兴趣，而是对办公室里的权力斗争感兴趣，特别是在中国银行这样一个非创新性企业。</p>
<p>好吧，我承认我开始俗了，我开始担心是否有车有房，是否能为和我一同来到这个世界上的小兄弟找个港湾。</p>
<p>接着想到民工般的工资，毒贩般的工作压力，GFW，Evil的Party &amp; Gov，悲剧的中国软件业～～～</p>
<p>开始觉得有点渺茫～～</p>
<p>Jason在考试成绩公布后，在Google Talk上留下一句极其霸气的话：</p>
<p>Undergraduate is done, now its time to change the world.</p>
<p>好吧，我承认我比一个35+，并有家室，小孩的人还悲观～～</p>
<p>最后膜拜下Jason</p>
<p><img src="/assets/images//jason-gtalk.jpg" alt="Jason"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近听到的消息有点多，&lt;/p&gt;
&lt;p&gt;FOR EXAMPLE,&lt;/p&gt;
&lt;p&gt;XX获得 UNIVERSITY XXX 的 OFFER （XXX可以替代 Cambridge，Oxford，OR Stanford etc..）。&lt;/p&gt;
    
    </summary>
    
      <category term="随便乱写" scheme="http://allenn.cn/categories/%E9%9A%8F%E4%BE%BF%E4%B9%B1%E5%86%99/"/>
    
    
      <category term="吐槽" scheme="http://allenn.cn/tags/%E5%90%90%E6%A7%BD/"/>
    
      <category term="毕业" scheme="http://allenn.cn/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
</feed>
